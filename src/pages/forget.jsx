import React, { useEffect, useState } from "react";
import { FaEnvelope, FaLock } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import axios from "axios"; // ‡πÉ‡∏ä‡πâ axios ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏¥‡∏á API
import "../style/Forget.css";
import { useCookies } from "react-cookie";
import { jwtDecode } from "jwt-decode"; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT
import { toast } from 'react-toastify';


const Forget = () => {
  const [form, setForm] = useState({ email_address: "", otp: "" });
  const navigate = useNavigate();
  const [cookies, setCookie] = useCookies(["token"]);
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á input
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
  const handleResendOTP = async () => {
    if (!form.email_address) {
      toast.warning("Please enter your email before sending the OTP!",
        {
          position: "top-center",
          autoClose: 2000,
          closeButton: false,
          hideProgressBar: true,
        });
      return;
    }

    try {
      await axios.post("https://project-safezone.onrender.com/api/otps/send-otp", {
        email: form.email_address,
      });

      toast.success("An OTP has been sent to your email address.",
        {
          position: "top-center",
          autoClose: 2000,
          closeButton: false,
          hideProgressBar: true,
        });
    } catch (error) {
      toast.error("An error occurred while sending the OTP.", {
        position: "top-center",
        autoClose: 2000,
        closeButton: false,
        hideProgressBar: true,
      });
      console.error("OTP Error:", error);
    }
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏ï‡∏≠‡∏ô‡∏Å‡∏î Confirm
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏Å‡πà‡∏≠‡∏ô
      await axios.post("https://project-safezone.onrender.com/api/otps/verify-otp", {
        email: form.email_address,
        otp: form.otp,
      });

      toast.success("The OTP is correct! Changing your password‚Ä¶",
        {
          position: "top-center",
          autoClose: 2000,
          closeButton: false,
          hideProgressBar: true,
        });

      // üîπ ‡∏Ç‡∏≠ Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const response = await axios.post("https://project-safezone.onrender.com/api/users/forgot", {
        email: form.email_address,
      });

      // ‚úÖ axios ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ JSON ‡∏ï‡∏£‡∏á‡πÜ ‚Üí ‡πÉ‡∏ä‡πâ response.data ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
      const { token } = response.data;

      // üîπ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ "exp"
      const decoded = jwtDecode(token);
      const expirationDate = new Date(decoded.exp * 1000); // ‡πÅ‡∏õ‡∏•‡∏á Unix Timestamp ‡πÄ‡∏õ‡πá‡∏ô Date

      // üîπ ‡πÄ‡∏Å‡πá‡∏ö Token ‡πÉ‡∏ô Cookie ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      setCookie("tokenforget", token, { path: "/ChangePassword", expires: expirationDate });

      // üîπ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      navigate("/ChangePassword");
    } catch (error) {
      if (error.response) {
        console.error("Error:", error.response.data.error);
        toast.error("The OTP is incorrect.",
          {
            position: "top-center",
            autoClose: 2000,
            closeButton: false,
            hideProgressBar: true,
          });
      } else {
        console.error("Unexpected Error:", error.message);
        toast.error("Something went wrong.",
          {
            position: "top-center",
            autoClose: 2000,
            closeButton: false,
            hideProgressBar: true,
          });
      }
    }
  };


  return (
    <div className="forget-box">
      <h1 className="forget-title">Forget Password</h1>
      <form onSubmit={handleSubmit} className="forget-form">
        <div className="input-group">
          <FaEnvelope className="input-icon" />
          <input
            type="email"
            name="email_address"
            placeholder="Email Address"
            value={form.email_address}
            onChange={handleChange}
            required
          />
        </div>
        <div className="input-group">
          <FaLock className="input-icon" />
          <input
            type="text"
            name="otp"
            placeholder="OTP from Email"
            value={form.otp}
            onChange={handleChange}
            required
          />
        </div>
        <p className="resend-text">
          Didn‚Äôt receive OTP?{" "}
          <span className="resend-link" onClick={handleResendOTP}>
            SEND OTP
          </span>
        </p>
        <button type="submit" className="confirm-button">
          Confirm
        </button>
      </form>
      <p className="login-link">
        I remember my password? <Link href="/login">Login</Link>
      </p>
    </div>
  );
};

export default Forget;
