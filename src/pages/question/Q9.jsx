import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "../../style/Q9.css";

const Q9 = () => {
  const questions = [
    "‡πÄ‡∏ö‡∏∑‡πà‡∏≠ ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£",
    "‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ",
    "‡∏´‡∏•‡∏±‡∏ö‡∏¢‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏ö‡πÜ ‡∏ï‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡πÑ‡∏õ",
    "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏µ‡πÅ‡∏£‡∏á",
    "‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á",
    "‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏π‡πÇ‡∏ó‡∏£‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏ü‡∏±‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à",
    "‡∏û‡∏π‡∏î‡∏ä‡πâ‡∏≤ ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ä‡πâ‡∏≤‡∏•‡∏á ‡∏à‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏™‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏™‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô",
    "‡∏Ñ‡∏¥‡∏î‡∏ó‡∏≥‡∏£‡πâ‡∏≤‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ñ‡∏á‡∏à‡∏∞‡∏î‡∏µ",
  ];

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [scores, setScores] = useState(Array(questions.length).fill(null));
  const [result, setResult] = useState(null);
  const navigate = useNavigate();

  const [isActive, setIsActive] = useState(false);

  const handleAnswer = (score) => {
    const updatedScores = [...scores];
    updatedScores[currentQuestionIndex] = score;
    setScores(updatedScores);
  };

  useEffect(() => {
    if (scores[currentQuestionIndex] !== null && !isActive) {
      const timeout = setTimeout(() => {
        handleNext();
      }, 200);
      return () => clearTimeout(timeout);
    }
  }, [scores, currentQuestionIndex]);


  const handleNext = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setIsActive(true);
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      calculateResult(scores);
    }
    setTimeout(() => {
      setIsActive(false);
    }, 200);
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setIsActive(true);
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
    setTimeout(() => {
      setIsActive(false);
    }, 200);
  };

  const calculateResult = (scores) => {
    const totalScore = scores.reduce((sum, score) => sum + score, 0);

    if (totalScore <= 6) {
      setResult("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤");
    } else if (totalScore <= 12) {
      setResult("‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢");
    } else if (totalScore <= 18) {
      setResult("‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á");
    } else {
      setResult("‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á");
    }

    sessionStorage.setItem("q9Answer", JSON.stringify(totalScore));
  };

  const handleNextButton = async () => {
    if (result === "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤") {
      const token = sessionStorage.getItem("token");
      const q2Answers = sessionStorage.getItem("q2Answer"); // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0 1 
      const q9Answers = sessionStorage.getItem("q9Answer") || {};

      if (!token) {
        alert("No saved answers or token found. Please try again.");
        return;
      }

      const requestData = { Q2: q2Answers, Q9: q9Answers };
      
      try {
        const response = await fetch("http://localhost:3000/api/questions/savequestion", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`, 
          },
          body: JSON.stringify(requestData),
        });

        if (response.ok) {
          const result = await response.json();
          console.log("‚úÖ ", result.message);
          navigate("/HomeLogin");
        } else {
          const errorData = await response.json();
          console.error("‚ùå Error:", errorData.error);
      }
      } catch (error) {
        console.error("‚ùå Network Error:", error);
      }
    } else {
      navigate("/Q8");
    }
  };

  return (
    <div className="screening-container">
      {result === null ? (
        <div className="question-card">
          <div className="step-process">
            {questions.map((_, index) => (
              <div
                key={index}
                className={`step-circle ${currentQuestionIndex === index ? "active" : currentQuestionIndex > index ? "completed" : ""}`}
              >
                {index + 1}
              </div>
            ))}
          </div>
          <h1 className="title">‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤ (9Q)</h1>
          <p className="question">
            ‡∏Ç‡πâ‡∏≠ {currentQuestionIndex + 1} :
            ‡πÉ‡∏ô 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô <br /> "{questions[currentQuestionIndex]}"</p>
          <div className="answers-row">
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(0)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 0 ? "selected" : ""}`}
              >
                üòÉ
              </button>
              <p className="subtitle"> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢ </p>
            </div>
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(1)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 1 ? "selected" : ""}`}
              >
                üòê
              </button>
              <p className="subtitle"> ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô (1-7 ‡∏ß‡∏±‡∏ô) </p>
            </div>
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(2)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 2 ? "selected" : ""}`}
              >
                üòû
              </button>
              <p className="subtitle"> ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡πà‡∏≠‡∏¢ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô) </p>
            </div>
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(3)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 3 ? "selected" : ""}`}
              >
                üò≠
              </button>
              <p className="subtitle"> ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô </p>
            </div>
          </div>

          <div className="navigation-buttons">
            {currentQuestionIndex > 0 && (
              <button
                onClick={handlePrevious}
                className="nav-button back"
              >
                Back
              </button>
            )}
          </div>
        </div>
      ) : (
        <div className="result-card">
          <h1 className="title">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö <br />‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ 9 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (9Q)</h1>
          <p className="result">{result}</p>
          <button onClick={handleNextButton} className="next-Question">
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default Q9;
