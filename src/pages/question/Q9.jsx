import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "../../style/Q9.css";
import { useCookies } from "react-cookie";
import { toast } from 'react-toastify';


const Q9 = () => {
  const [cookies] = useCookies(["token"]);
  const questions = [
    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏ö‡∏∑‡πà‡∏≠ ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£ ‡πÜ ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à",
    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à ‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏à‡∏°‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏ó‡πâ‡∏≠ ‡πÜ ‡∏ö‡πâ‡∏≤‡∏á",
    "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏ö‡∏¢‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏ï‡∏∑‡πà‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°",
    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°",
    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ú‡∏•‡∏≠‡∏Å‡∏¥‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°",
    "‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏° ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á",
    "‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏î‡∏à‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏π‡∏ó‡∏µ‡∏ß‡∏µ ‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≤‡∏ò‡∏¥",
    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ä‡πâ‡∏≤‡∏•‡∏á‡∏à‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏™‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏™‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô",
    "‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÅ‡∏ß‡πâ‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤",
  ];

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [scores, setScores] = useState(Array(questions.length).fill(null));
  const [result, setResult] = useState(null);
  const navigate = useNavigate();

  const [isActive, setIsActive] = useState(false);

  const handleAnswer = (score) => {
    const updatedScores = [...scores];
    updatedScores[currentQuestionIndex] = score;
    setScores(updatedScores);
  };

  useEffect(() => {
    if (scores[currentQuestionIndex] !== null && !isActive) {
      const timeout = setTimeout(() => {
        handleNext();
      }, 200);
      return () => clearTimeout(timeout);
    }
  }, [scores, currentQuestionIndex]);


  const handleNext = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setIsActive(true);
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      calculateResult(scores);
    }
    setTimeout(() => {
      setIsActive(false);
    }, 200);
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setIsActive(true);
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
    setTimeout(() => {
      setIsActive(false);
    }, 200);
  };

  const calculateResult = (scores) => {
    const totalScore = scores.reduce((sum, score) => sum + score, 0);

    if (totalScore <= 6) {
      setResult("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤");
    } else if (totalScore <= 12) {
      setResult(
        <>
          ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
          <br />
          ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢ (8Q)
        </>
      );
    } else if (totalScore <= 18) {
      setResult(
        <>
          ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
          <br />
          ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢ (8Q)
        </>
      );
    } else {
      setResult(
        <>
          ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
          <br />
          ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢ (8Q)
        </>
      );
    }
    sessionStorage.setItem("q9Answer", JSON.stringify(totalScore));
  };

  const handleNextButton = async () => {
    if (result === "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤") {
      const token = cookies.token;
      const q2Answers = sessionStorage.getItem("q2Answer"); // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0 1 
      const q9Answers = sessionStorage.getItem("q9Answer") || {};

      if (!token) {
        alert("No saved answers or token found. Please try again.");
        return;
      }

      const requestData = { Q2: q2Answers, Q9: q9Answers };

      try {
        const response = await fetch("https://project-safezone.onrender.com/api/questions/savequestion", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(requestData),
        });

        if (response.ok) {
          toast.success("Your depression screening results have been saved.",
            {
              position: "top-center",
              autoClose: 2000,
              closeButton: false,
              hideProgressBar: true,
            });
        } else {
          const errorData = await response.json();
          toast.error(`Error: ${errorData.error}`,
            {
              position: "top-center",
              autoClose: 2000,
              closeButton: false,
              hideProgressBar: true,
            });
        }
        navigate("/HomeLogin");
      } catch (error) {
        toast.error(`Error: ${error}`,
          {
            position: "top-center",
            autoClose: 2000,
            closeButton: false,
            hideProgressBar: true,
          });
      }
    } else {
      navigate("/Q8");
    }
  };

  return (
    <div className="screening-container">
      {result === null ? (
        <div className="question-card">
          <div className="step-process">
            {questions.map((_, index) => (
              <div
                key={index}
                className={`step-circle ${currentQuestionIndex === index ? "active" : currentQuestionIndex > index ? "completed" : ""}`}
              >
                {index + 1}
              </div>
            ))}
          </div>
          <h1 className="title">‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤ (9Q)</h1>
          <p className="question">
            ‡∏Ç‡πâ‡∏≠ {currentQuestionIndex + 1} :
            ‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á? <br /> "{questions[currentQuestionIndex]}"</p>
          <div className="answers-row">
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(0)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 0 ? "selected" : ""}`}
              >
                üòÉ
              </button>
              <p className="subtitle"> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢ </p>
            </div>
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(1)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 1 ? "selected" : ""}`}
              >
                üòê
              </button>
              <p className="subtitle"> ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô (1-7 ‡∏ß‡∏±‡∏ô) </p>
            </div>
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(2)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 2 ? "selected" : ""}`}
              >
                üòû
              </button>
              <p className="subtitle"> ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡πà‡∏≠‡∏¢ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô) </p>
            </div>
            <div className="answer-column">
              <button
                onClick={() => handleAnswer(3)}
                className={`answer-Qustion ${scores[currentQuestionIndex] === 3 ? "selected" : ""}`}
              >
                üò≠
              </button>
              <p className="subtitle"> ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô </p>
            </div>
          </div>

          <div className="navigation-buttons">
            {currentQuestionIndex > 0 && (
              <button
                onClick={handlePrevious}
                className="nav-button back"
              >
                Back
              </button>
            )}
          </div>
        </div>
      ) : (
        <div className="result-card">
          <h1 className="title">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö <br /> ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ 9 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (9Q) </h1>
          <p className="result">{result}</p>
          <button onClick={handleNextButton} className="next-Question">
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default Q9;
